"""
–¢–µ—Å—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö OHLCV –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
–°–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç OHLCV
"""
import sys
import os
import asyncio
import json
import time
from datetime import datetime
from pathlib import Path

# Fix Windows console encoding
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.websocket_handler import TradeWebSocket
from src.config import start_candle_logging

# –£–∫–∞–∑–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
TEST_SYMBOLS = [
    '0GUSDT',
    '1000BONKUSDT',
    'ALPINEUSDT',
    'ASTERUSDT',
    'AVNTUSDT',
    'BIOSUSDT',
    'BLESSUSDT',
    'EDENUSDT',
    'EIGENUSDT'
]

async def test_ohlcv_collection():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ OHLCV –¥–∞–Ω–Ω—ã—Ö –∑–∞ 2 –º–∏–Ω—É—Ç—ã"""
    print("=" * 80)
    print("–¢–ï–°–¢ –°–ë–û–†–ê OHLCV –î–ê–ù–ù–´–• –ó–ê 2 –ú–ò–ù–£–¢–´")
    print("=" * 80)
    
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã ({len(TEST_SYMBOLS)}):")
    for i, symbol in enumerate(TEST_SYMBOLS, 1):
        print(f"   {i}. {symbol}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    results_dir = Path("results")
    results_dir.mkdir(exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π
    start_candle_logging()
    await asyncio.sleep(0.5)
    
    # –°–æ–∑–¥–∞–µ–º WebSocket –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
    aggregator = TradeWebSocket(TEST_SYMBOLS)
    ws_task = asyncio.create_task(aggregator.start_connection())
    
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
    await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    print("\n‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö OHLCV –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç (120 —Å–µ–∫—É–Ω–¥)...")
    print("üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è 10-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
    print("-" * 90)
    
    start_time = time.time()
    collection_duration = 120  # 2 –º–∏–Ω—É—Ç—ã
    last_10sec_report = start_time
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö
    ohlcv_data = {}
    
    try:
        while time.time() - start_time < collection_duration:
            await asyncio.sleep(0.5)  # –ë–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            if current_time - last_10sec_report >= 10:
                elapsed = int(current_time - start_time)
                current_10sec_period = (elapsed // 10) + 1
                
                print(f"\nüïØÔ∏è 10-—Å–µ–∫—É–Ω–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ #{current_10sec_period} (–≤—Ä–µ–º—è: {elapsed}s):")
                print("-" * 90)
                print(f"{'–ú–æ–Ω–µ—Ç–∞':<15} {'Open':<10} {'High':<10} {'Low':<10} {'Close':<10} {'Volume':<12}")
                print("-" * 90)
                
                period_has_data = False
                
                for symbol in TEST_SYMBOLS:
                    candles = aggregator.candles_buffer.get(symbol, [])
                    if candles:
                        if symbol not in ohlcv_data:
                            ohlcv_data[symbol] = []
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏
                        last_candle_count = len(ohlcv_data[symbol])
                        new_candles = candles[last_candle_count:]
                        
                        for candle in new_candles:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                            candle_time = datetime.fromtimestamp(candle['timestamp'] / 1000)
                            
                            ohlcv_entry = {
                                'timestamp': candle['timestamp'],
                                'time_str': candle_time.strftime('%H:%M:%S'),
                                'open': candle['open'],
                                'high': candle['high'],
                                'low': candle['low'],
                                'close': candle['close'],
                                'volume': candle['volume']
                            }
                            ohlcv_data[symbol].append(ohlcv_entry)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
                        if candles:
                            last_candle = candles[-1]
                            print(f"{symbol:<15} {last_candle['open']:<10.6f} {last_candle['high']:<10.6f} "
                                  f"{last_candle['low']:<10.6f} {last_candle['close']:<10.6f} {last_candle['volume']:<12.2f}")
                            period_has_data = True
                        else:
                            print(f"{symbol:<15} {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':<58}")
                    else:
                        print(f"{symbol:<15} {'–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö':<58}")
                
                if not period_has_data:
                    print("üìù –ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç, –∞–≥—Ä–µ–≥–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
                
                last_10sec_report = current_time
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    finally:
        await aggregator.stop()
        await asyncio.sleep(1)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ OHLCV")
    print("=" * 80)
    
    elapsed = int(time.time() - start_time)
    print(f"\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞: {elapsed} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    results_file = results_dir / f"ohlcv_2min_{int(start_time)}.json"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(ohlcv_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç–µ
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º:")
    print("-" * 80)
    print(f"{'–ú–æ–Ω–µ—Ç–∞':<15} {'–°–≤–µ—á–µ–π':<8} {'–û–±—ä–µ–º':<12} {'–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞':<12} {'–í—Ä–µ–º—è':<10}")
    print("-" * 80)
    
    total_candles_all = 0
    total_volume_all = 0
    
    for symbol in TEST_SYMBOLS:
        candles = ohlcv_data.get(symbol, [])
        candle_count = len(candles)
        
        if candle_count > 0:
            last_candle = candles[-1]
            total_volume = sum(c['volume'] for c in candles)
            last_price = last_candle['close']
            last_time = last_candle['time_str']
            
            print(f"{symbol:<15} {candle_count:<8} {total_volume:<12.2f} {last_price:<12.6f} {last_time:<10}")
            
            total_candles_all += candle_count
            total_volume_all += total_volume
        else:
            print(f"{symbol:<15} {'0':<8} {'0.00':<12} {'N/A':<12} {'N/A':<10}")
    
    print("-" * 80)
    print(f"{'–ò–¢–û–ì–û':<15} {total_candles_all:<8} {total_volume_all:<12.2f} {'-':<12} {'-':<10}")
    
    # –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
    print(f"\nüïØÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã:")
    print("-" * 80)
    
    for symbol in TEST_SYMBOLS:
        candles = ohlcv_data.get(symbol, [])
        if candles:
            print(f"\n{symbol}:")
            print(f"{'–í—Ä–µ–º—è':<10} {'Open':<10} {'High':<10} {'Low':<10} {'Close':<10} {'Volume':<10}")
            print("-" * 60)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π
            recent_candles = candles[-5:]
            for candle in recent_candles:
                print(f"{candle['time_str']:<10} "
                      f"{candle['open']:<10.6f} "
                      f"{candle['high']:<10.6f} "
                      f"{candle['low']:<10.6f} "
                      f"{candle['close']:<10.6f} "
                      f"{candle['volume']:<10.2f}")
        else:
            print(f"\n{symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 80)
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        success = await test_ohlcv_collection()
        return success
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)